name: Build and Upload JAR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Clean
        run: ./gradlew clean

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Get JAR file name
        id: jar-name
        run: |
          JAR_FILE=$(find build/libs -name "*.jar" -type f | head -n 1)
          JAR_NAME=$(basename "$JAR_FILE")
          
          echo "Found JAR file: $JAR_FILE"
          echo "JAR name: $JAR_NAME"

      - name: Upload JAR to server
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          JAR_FILE: ${{ steps.jar-name.outputs.JAR_FILE }}
          JAR_NAME: ${{ steps.jar-name.outputs.JAR_NAME }}
        run: |
          # SSH 키 설정
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          JAR_FILE=""
          
          # 방법 1: 일반적인 패턴
          if [ -z "$JAR_FILE" ]; then
            JAR_FILE=$(find build/libs -name "*.jar" -not -name "*-plain.jar" -type f | head -n 1)
          fi
          
          JAR_NAME=$(basename "$JAR_FILE")
          
          echo "Found JAR file: $JAR_FILE"
          echo "JAR name: $JAR_NAME"
          echo "JAR file size: $(ls -lh "$JAR_FILE")"

          # 서버로 JAR 파일 전송
          scp -i private_key -o StrictHostKeyChecking=no "$JAR_FILE" "$USER@$HOST:/app/auto/"
          
          echo "JAR file uploaded successfully to /app/$JAR_NAME"

          ssh -i private_key -o StrictHostKeyChecking=no "$USER@$HOST" "cp /app/auto/$JAR_NAME /app/"

      - name: Application Exit & Deploy
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          HOST: ${{ secrets.HOST }}
          USER: ${{ secrets.USER }}
          JAR_FILE: ${{ steps.jar-name.outputs.JAR_FILE }}
          JAR_NAME: ${{ steps.jar-name.outputs.JAR_NAME }}
        run: |
          # 기존 애플리케이션 종료
          echo "Stopping existing application..."
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "$USER@$HOST" << 'EOF'
            # Java 애플리케이션 프로세스 찾기
            PID=$(pgrep -f "mylimbus")
            
            if [ ! -z "$PID" ]; then
              echo "Found running Java application (PID: $PID)"
    
              # 정상 종료 시도
              kill $PID
              
              # 프로세스가 완전히 종료될 때까지 대기 (최대 30초)
              for i in {1..30}; do
                if ! kill -0 $PID 2>/dev/null; then
                  echo "Application stopped successfully"
                  break
                fi
                echo "Waiting for application to stop... ($i/30)"
                sleep 1
              done
              
              # 여전히 실행 중이면 강제 종료
              if kill -0 $PID 2>/dev/null; then
                echo "Force killing application..."
                kill -9 $PID
                sleep 2
              fi
            
              # 최종 확인
              if pgrep -f "mylimbus" > /dev/null; then
                echo "Warning: Some Java processes may still be running"
                pgrep -f "mylimbus"
              else
                echo "All Java applications stopped"
              fi
            else
              echo "No running Java application found"
            fi
          EOF
          
          # start.sh 스크립트 실행 (현재 주석처리 - 기존 애플리케이션 종료 후 활성화)
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR "$USER@$HOST" "cd /app && ./start.sh"
          
          # 임시 키 파일 삭제
          rm private_key